@page "/AllBooksList"
@using Newtonsoft.Json;
@using WebbDesignBlazorLabb3.Shared;

@inject HttpClient client;
@inject NavigationManager UriHelper

<AuthorizeView>
	<Authorized>
		<!-- Modal -->
		<div class="modal fade" id="removeBookModal" tabindex="5" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
						<button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						Vill du verkligen ta bort boken?
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						<button class="btn btn-outline-danger" @onclick="() => DeleteBook(bookToRemove)" data-bs-dismiss="modal" > Delete </button>
					</div>
				</div>
			</div>
		</div>


		<h3>Edit Books</h3>
		<table class="table table-striped table-hover">
			<thead>
				<tr>
					<th scope="col">ISBN</th>
					<th scope="col">Title</th>
					<th scope="col">Author</th>
					<th scope="col">Operations</th>
				</tr>
			</thead>
			<tbody>
				<Virtualize Items="BookList" Context="book">
					<tr>
						<th scope="row">@book.Isbn</th>
						<th scope="row">@book.Title</th>
						<th scope="row">
							@foreach (var auth in book.Authors)
							{
								@auth
							}
						</th>
						<div class="btn-group-lg">
							<button class="btn btn-warning" @onclick="() => GoToEdit(book.Isbn)"> Edit </button>
							<button type="button" class="btn btn-outline-danger" @onclick="() =>BookToRemove(book.Isbn)" data-bs-toggle="modal" data-bs-target="#removeBookModal">
								Delete
							</button>
							
						</div>
					</tr>
				</Virtualize>
			</tbody>
		</table>
	</Authorized>
	<NotAuthorized>
		<p> You are not logged in! </p>
	</NotAuthorized>
</AuthorizeView>

@code {
	//@onclick="() => DeleteBook(book.Isbn)"
	List<BookDto> BookList = new();
	long bookToRemove;
	private void BookToRemove(long isbn)
	{
		bookToRemove = isbn;
	}
	protected override async Task OnInitializedAsync()
	{
		await GetAllBooks();
	}

	private async Task GetAllBooks()
	{
		BookList = (await client.GetFromJsonAsync<IEnumerable<BookDto>>("book/getAll")).ToList();
	}

	private void GoToEdit(long isbn)
	{
		UriHelper.NavigateTo($"Editbook/{isbn}");
	}
	private async void DeleteBook(long isbn)
	{
		await client.DeleteAsync($"book/delete/{isbn}");
		await GetAllBooks();
		StateHasChanged();
	}

}
